package com.soen341.service.impl;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;

import com.soen341.model.Person;
import com.soen341.service.PersonService;

@Service("personService")
public class PersonServiceImpl implements PersonService
{
	private EntityManager entityManager;

	// -------------------------------------------------------------------------------
	@PersistenceContext
	public void setEntityManager(EntityManager entityManager)
	{
		this.entityManager = entityManager;
	}

	// -------------------------------------------------------------------------------
	public EntityManager getEntityManager()
	{
		return entityManager;
	}

	// -------------------------------------------------------------------------------
	@SuppressWarnings("unchecked")
	public Person findByName(String name)
	{
		Person result = null;
		Query queryFindByName = entityManager.createNamedQuery("Person.findByName");
		queryFindByName.setParameter("name", name);
		List<Person> persons = queryFindByName.getResultList();

		if(persons.size() > 0)
		{
			result = persons.get(0);
		}

		return result;
	}

	// -------------------------------------------------------------------------------
	@Transactional(readOnly = true)
	public Person getById(int id)
	{
		return entityManager.find(Person.class, id);
	}

	// -------------------------------------------------------------------------------
	@SuppressWarnings("unchecked")
	@Transactional(readOnly = true)
	public List<Person> getAll()
	{
		Query query = entityManager.createNamedQuery("Person.findAll");
		List<Person> persons = null;
		persons = query.getResultList();
		return persons;
	}

	// -------------------------------------------------------------------------------
	@Transactional(readOnly=false, propagation=Propagation.REQUIRED)
	public boolean save(Person person)
	{

		entityManager.persist(person);
		entityManager.flush();

		return true;
	}

	// -------------------------------------------------------------------------------
	@Transactional(readOnly=false, propagation=Propagation.REQUIRED)
	public boolean update(Person person)
	{
		entityManager.merge(person);
		entityManager.flush();
		return true;
	}

	// -------------------------------------------------------------------------------
	@Transactional(readOnly=false, propagation=Propagation.REQUIRED)
	public boolean delete(Person person)
	{
		person = entityManager.getReference(Person.class, person.getId());
		if (person == null)
			return false;
		entityManager.remove(person);
		entityManager.flush();
		return true;
	}

	// -------------------------------------------------------------------------------
	@SuppressWarnings("unchecked")
	@Transactional(readOnly = true)
	public Person findPerson(Person person)
	{
		Person result = null;
		Query queryFindPerson = entityManager.createNamedQuery("Person.findPerson");
		queryFindPerson.setParameter("name", person.getName());
		queryFindPerson.setParameter("age", person.getAge());
		List<Person> persons = queryFindPerson.getResultList();
		if(persons.size() > 0)
		{
			result = persons.get(0);
		}
		return result;
	}


}
